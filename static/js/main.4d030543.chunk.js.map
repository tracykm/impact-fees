{"version":3,"sources":["components/About.tsx","types.ts","components/Cell.jsx","components/columns.tsx","components/TableStyles.ts","components/Table.jsx","components/Dropdown.tsx","components/ButtonOptions.tsx","components/ButtonsOrDropdown.tsx","components/AllStateAveragesPage.jsx","components/JurisdictionTable.tsx","components/HistoryLineChart.tsx","components/DonutChart.tsx","components/UtilPieChart.tsx","components/DetailPage.tsx","utils/getUsedKeys.ts","components/NationalAveragesPage.jsx","components/OverallTable.jsx","components/JurisdictionPage.tsx","components/StateAveragesPage.jsx","components/ScrollToTop.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Wrapper","styled","div","About","className","PropertyDict","SingleFamily","color","MultiFamily","Retail","Office","Industrial","TypesOfPlaces","Object","keys","UtilityDict","Total","Icon","NonUtil","Fire","FaFireAlt","Roads","FaRoad","GenGov","FaBuilding","Schools","FaSchool","Sewer","FaWaveSquare","Library","FaBook","Parks","FaTree","Drain","FaShower","Water","FaWater","Police","FaShieldAlt","Other","STATES","name","short_name","DollarCell","cell","id","column","split","notes","row","original","formatMoney","value","undefined","toFixed","replace","slice","DateCell","date","monthIndex","getMonth","getFullYear","formatDate","Date","ColHeader","DetailColumns","path","usedKeys","cols","map","k","Header","accessor","Cell","width","filter","c","includes","pop","allKeys","AllDetailColumns","columns","TableStyles","SearchBar","useState","columnFilter","setColumnFilter","currentCol","style","onChange","e","Number","target","setFilter","filterValue","placeholder","Table","data","hasPagination","useTable","initialState","pageSize","useBlockLayout","useFilters","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","args","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","size","i","getRowProps","cells","getCellProps","onClick","disabled","length","type","defaultValue","key","Dropdown","options","d","ButtonOption","button","props","selected","ButtonOptions","role","icon","ButtonsOrDropdown","stateAverages","forEach","State","push","DataEntries","find","StateShortName","yearOpts","sort","d1","d2","Updated","getShortStateName","val","AllStateAveragesPage","yearSelected","changeYear","selectedPlace","changePlace","selectedUtil","changeUtil","leftOffStates","myData","SampleSize","AllBars","place","dataKey","fill","margin","height","tickFormatter","formatter","to","s","JurisdictionTable","HistoryLineChart","utility","setUtility","opts","values","flat","reduce","acc","bottom","domain","labelFormatter","propertyType","stroke","renderCustomizedLabel","tooltipPayload","percent","percentStr","Math","round","DonutChart","cx","cy","innerRadius","outerRadius","paddingAngle","label","entry","index","UtilPieChart","yearsUsed","String","setPropertyType","yearIdx","setYear","ChartsWrapper","DetailPage","headerText","pointInTime","group","groupTime","Array","isArray","cat","getUsedKeys","n","NationalAveragesPage","opacity","marginTop","samples","dataJS","OverallTable","React","useMemo","County","JurisdictionPage","useParams","nestedData","StateAveragesPage","fontSize","textAlign","Jurisdiction","sampleSizes","min","max","jurisdictions","SampleJurisdictions","j","withRouter","history","useEffect","unlisten","listen","window","scrollTo","NavWrapper","nav","StateBreadcrumb","JurisdictionBreadcrumb","Breadcrumbs","Nav","pathname","useLocation","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d030543.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  font-size: 18px;\n  h2 {\n    font-size: inherit;\n    font-weight: bolder;\n    margin-top: 1em;\n  }\n  h5 {\n    font-size: inherit;\n    font-weight: bolder;\n    margin-top: 1em;\n    opacity: 0.5;\n  }\n\n  .two-col {\n    display: grid;\n    grid-template-columns: 4fr 7fr;\n    grid-column-gap: 2em;\n  }\n  max-width: 1200px;\n  margin: auto;\n`;\n\nexport const About = () => (\n  <Wrapper>\n    <h1>About</h1>\n    <p>\n      This report presents the results of a detailed survey of impact fees that\n      individual jurisdictions across the country are charging. Unlike in-kind\n      developer exactions,impact fees are expressed in dollars and have\n      published fee schedules, making it easy to compare fees charged by\n      different jurisdictions. The results of the survey describe where impact\n      fees are most common, how much jurisdictions in various states are\n      charging, and the types of facilities for which fees are being charged.\n    </p>\n    <main className=\"two-col\">\n      <div>\n        <h2>What Qualifies as an Impact Fee?</h2>\n        <p>\n          The multitude of names used to refer to impact fees is one obstacle to\n          developing an accurate survey of such fees. Common terms used to refer\n          to impact fees include “capacity fees,” “facility fees,” “system\n          development charges” and “capital recovery fees.” Their common\n          characteristics are that (1) they are charged only to new development,\n          (2) they are standardized fees as opposed to ad hoc, negotiated\n          payments and (3) they are designed and used to fund capital\n          improvements needed to serve growth.\n        </p>\n        <h5>Utility Connection Fees</h5>\n        <p>\n          Water and wastewater connection fees that are used to fund\n          growth-related capital improvements should be classified as impact\n          fees. However, connection fees often mix impact fee components with\n          service fees that cover other types of costs, such as the purchase of\n          a water meter, the inspection of the connection, or the administrative\n          cost of establishing a new customer account. In addition, because\n          water and wastewater fees preceded other kinds of impact fees, they\n          are often authorized under separate statutory authority and are often\n          more difficult to find. This presents the researcher with a problem.\n          Counting only clearly-labeled water and wastewater impact fees is\n          likely to under-represent them, but seldom are there sufficient\n          resources to interview local officials to determine what portion of a\n          connection fee is actually an impact fee. For these reasons, it is\n          often useful to look at “non-utility” impact fees separately from\n          total impact fees.\n        </p>\n        <h5>Fees-in-Lieu. </h5>\n        <p>\n          Fees charged in lieu of and dedication for parks and schools are\n          conceptually very similar to impact fees, and should also be counted\n          in an impact fee survey. Essentially, they function much like an\n          impact fee for the land component of the facility. Indeed, some\n          communities use an impact fee for the construction cost component, and\n          combine that with a land dedication/fee-in-lieu requirement for the\n          land component. In California, park fees in-lieu of land dedication\n          are known as “Quimby fees,” after the name of the 1966 state act\n          authorizing such fees. Because they are not labeled as impact fees,\n          land dedication fees-in-lieu are often overlooked in impact fee\n          surveys.\n        </p>\n        <h5>Development Taxes</h5>\n        <p>\n          Another class of fee that is functionally very similar to an impact\n          fee is the development tax, which is sometimes also referred to as a\n          development excise tax, privilege tax or facilities tax. This is a tax\n          that only applies to new development, of ten on a per square foot\n          basis, and is earmarked for capital improvements. The two can be\n          difficult to distinguish. For example, Boulder, Colorado hired\n          consultants to conduct a nexus study and adopted an ordinance that had\n          all of the trappings of an impact fee ordinance, including earmarking\n          of funds for specific types of capital facilities and providing credit\n          against the charges for developer-constructed improvements, but\n          instead of adopting them as impact fees the City adopted them as\n          development taxes. This survey includes development taxes.\n        </p>\n      </div>\n      <div>\n        <h2>Some Caveats</h2>\n        <p>\n          The results of impact fee surveys can be misinterpreted. This can be\n          avoided if the reader keeps the following caveats in mind.\n        </p>\n        <p>\n          <h5>Not Exhaustive Samples</h5>\n          Like most impact fee surveys, this survey only includes communities\n          that charge some impact fees, and excludes those that don ot. Thus, an\n          “average impact fee” must be understood as an average fee for those\n          communities that charge impact fees, not as an average for all\n          communities. Although in California state limits on local taxing\n          authority and relatively liberal impact fee enabling legislation have\n          combined to make impact fees virtually universal, in most other parts\n          of the country communities that have impact fees (other than\n          ubiquitous water and wastewater connection fees) tend to be in the\n          minority.\n        </p>\n        <h5>Not Random Samples</h5>\n        <p>\n          Impact fee surveys tend to be opportunistic, and this one is no\n          exception. For the most part, the inclusion of a community is\n          determined by how readily available the information is. Communities\n          that post their fee schedules on their website are more likely to be\n          included in a survey than communities that do not. Consultants who\n          compile surveys are more likely to include communities that have been\n          clients or that are in the same region with former clients, and this\n          one is no exception. For example, our firm compiled extensive surveys\n          of impact fees in Arizona and Florida for client communities in those\n          states. For these reasons, the fact that a state is not well\n          represented in a national survey does not necessarily mean that the\n          state does not have many impact fees.\n        </p>\n        <h5>Average Total Fee, not Sum of Average Fees</h5>\n        <p>\n          In this survey, average fees are presented for a variety of capital\n          facilities. These averages exclude communities that are represented in\n          the survey but do not charge impact fees for the particular facility\n          type. One could sum these average fees by facility type, but this “sum\n          of the average fees” does not represent the average fee for\n          communities that charge impact fees. A more meaningful statistic, and\n          the one reported here, is the “average of the total impact fees”\n          charged by all communities represented in the survey.\n        </p>\n        <p>\n          The fact that a community does not charge a particular impact fee does\n          not mean that developers make no contributions to that type of capital\n          facility. This is particularly true in the case of roads, because many\n          communities without road impact fees require developers to dedicate\n          right-of-way and make substantial improvements to abutting roadways as\n          conditions of development approval. In communities with road impact\n          fees, developers who are required to make in-kind contributions may\n          receive credit against their impact fees for the value of those\n          contributions. Thus,developers may actually contribute more on average\n          to the cost of major road improvements in communities without road\n          impact fees than in communities with modest road impact fees.\n        </p>\n        <h5>Exactions</h5>\n        <p>\n          Some communities have standard developer exactions that are not\n          expressed in dollars. Typical examples are road right-of-way and park\n          and school land dedication requirements. We included an estimated cost\n          per development unit to represent the value of such required\n          contributions whenever possible.\n        </p>\n        <p>\n          In addition to broadly-applicable developer exaction requirements,\n          some development may also be required or induced to offer other\n          contributions toward public capital improvements, such as over-sizing\n          water and wastewater lines or making land dedications for roads,\n          parks, or fire stations that are not required for all developments. It\n          was not possible to assign a standard dollar value per development\n          unit for such ad hoc or negotiated exactions.\n        </p>\n        <h5>Unusual Assessment Bases</h5>\n        <p>\n          Most impact fee schedules assess impact fees per residential dwelling\n          unit or per 1,000 square feet of nonresidential development, and that\n          is reflected in the structure of the survey. However, some communities\n          use a different basis for at least some fees. Residential fees may be\n          assessed based on unit size or number of bedrooms, rather than by a\n          flat rate per dwelling unit. Utility fees are generally assessed by\n          meter size for multi-family and nonresidential uses. Drainage fees are\n          often assessed per square foot of impervious cover. To address this\n          issue, we assumed typical residential unit size, number of bedrooms,\n          and building densities, and these assumptions are identified in the\n          land use headings of the survey sheets that follow.\n        </p>\n        <p>\n          For some communities, published water and wastewater fees were only\n          available for a single-family home. In these cases, we took advantage\n          of the fact that virtually all water and wastewater fees are based on\n          the capacity of the water meter, and there is a relatively standard\n          relationship between the smallest meter size that is almost always the\n          one used by most single-family homes and the larger meters typically\n          used for multi-family and nonresidential development. We assumed that\n          a 2” meter has 7 times the capacity of the single-family meter, Survey\n          Data and a 3” meter has 16 times as much capacity.\n        </p>\n      </div>\n    </main>\n    <p>\n      The survey was completed by Clancy Mullen, principal of DuncanAssociates,\n      on August 18, 2019, with assistance from Matt Dixon, graduate research\n      assistant at the University of Arizona, and David Hymel and Stuart\n      Wallace, J.D. candidates at Georgia State University College of Law.\n    </p>\n  </Wrapper>\n);\n","import {\n  FaFireAlt,\n  FaTree,\n  FaWater,\n  FaBook,\n  FaShieldAlt,\n  FaRoad,\n  FaBuilding,\n  FaSchool,\n  FaWaveSquare,\n  FaShower\n} from \"react-icons/fa\";\n\nexport interface JurisdictionData {\n  State: string;\n  County: string;\n  Jurisdiction: string;\n  DataEntries: DataEntry[];\n}\nexport type DataEntry = {\n  Updated: number;\n  SampleSize?: number;\n  RecordedAt: string;\n  SingleFamily: UtilityBreakDown;\n  MultiFamily: UtilityBreakDown;\n  Retail: UtilityBreakDown;\n  Office: UtilityBreakDown;\n  Industrial: UtilityBreakDown;\n};\nexport type PropertyType =\n  | \"SingleFamily\"\n  | \"MultiFamily\"\n  | \"Retail\"\n  | \"Office\"\n  | \"Industrial\";\nexport type UtilityType = keyof UtilityBreakDown;\n\nexport interface UtilityBreakDown {\n  Total?: number;\n  NonUtil?: number;\n  Roads?: number;\n  Water?: number;\n  Sewer?: number;\n  Drain?: number;\n  Parks?: number;\n  Library?: number;\n  Fire?: number;\n  Police?: number;\n  GenGov?: number;\n  Schools?: number;\n  Other?: number;\n}\n\nexport const PropertyDict: { [k in PropertyType]: { color: string } } = {\n  SingleFamily: {\n    color: \"#a3ea83\"\n  },\n  MultiFamily: {\n    color: \"#31c3a6\"\n  },\n  Retail: {\n    color: \"#01a4ac\"\n  },\n  Office: {\n    color: \"#36849d\"\n  },\n  Industrial: {\n    color: \"#56d19d\"\n  }\n};\n// @ts-ignore\nexport const TypesOfPlaces: PropertyType[] = Object.keys(PropertyDict);\n\nexport const UtilityDict = {\n  Total: {\n    color: \"#565154\",\n    Icon: null\n  },\n  NonUtil: {\n    color: \"#ccc\",\n    Icon: null\n  },\n  Fire: {\n    color: \"#fafa6e\",\n    Icon: FaFireAlt\n  },\n  Roads: {\n    color: \"#cdf377\",\n    Icon: FaRoad\n  },\n  GenGov: {\n    color: \"#a3ea83\",\n    Icon: FaBuilding\n  },\n  Schools: {\n    color: \"#7cde91\",\n    Icon: FaSchool\n  },\n  Sewer: {\n    color: \"#31c3a6\",\n    Icon: FaWaveSquare\n  },\n  Library: {\n    color: \"#09b4ac\",\n    Icon: FaBook\n  },\n  Parks: {\n    color: \"#01a4ac\",\n    Icon: FaTree\n  },\n  Drain: {\n    color: \"#2094a7\",\n    Icon: FaShower\n  },\n  Water: {\n    color: \"#36849d\",\n    Icon: FaWater\n  },\n  Police: {\n    color: \"#44748e\",\n    Icon: FaShieldAlt\n  },\n  Other: {\n    color: \"#56d19d\",\n    Icon: null\n  }\n};\n\n// @ts-ignore\nexport const TypesOfUtilities: UtilityType[] = Object.keys(UtilityDict);\n\nexport const STATES = [\n  { name: \"Alabama\", short_name: \"AL\" },\n  { name: \"Alaska\", short_name: \"AK\" },\n  { name: \"Arizona\", short_name: \"AZ\" },\n  { name: \"Arkansas\", short_name: \"AR\" },\n  { name: \"California\", short_name: \"CA\" },\n  { name: \"Colorado\", short_name: \"CO\" },\n  { name: \"Connecticut\", short_name: \"CT\" },\n  { name: \"Delaware\", short_name: \"DE\" },\n  { name: \"Florida\", short_name: \"FL\" },\n  { name: \"Georgia\", short_name: \"GA\" },\n  { name: \"Hawaii\", short_name: \"HI\" },\n  { name: \"Idaho\", short_name: \"ID\" },\n  { name: \"Illinois\", short_name: \"IL\" },\n  { name: \"Indiana\", short_name: \"IN\" },\n  { name: \"Iowa\", short_name: \"IA\" },\n  { name: \"Kansas\", short_name: \"KS\" },\n  { name: \"Kentucky\", short_name: \"KY\" },\n  { name: \"Louisiana\", short_name: \"LA\" },\n  { name: \"Maine\", short_name: \"ME\" },\n  { name: \"Maryland\", short_name: \"MD\" },\n  { name: \"Massachusetts\", short_name: \"MA\" },\n  { name: \"Michigan\", short_name: \"MI\" },\n  { name: \"Minnesota\", short_name: \"MN\" },\n  { name: \"Mississippi\", short_name: \"MS\" },\n  { name: \"Missouri\", short_name: \"MO\" },\n  { name: \"Montana\", short_name: \"MT\" },\n  { name: \"Nebraska\", short_name: \"NE\" },\n  { name: \"Nevada\", short_name: \"NV\" },\n  { name: \"New Hampshire\", short_name: \"NH\" },\n  { name: \"New Jersey\", short_name: \"NJ\" },\n  { name: \"New Mexico\", short_name: \"NM\" },\n  { name: \"New York\", short_name: \"NY\" },\n  { name: \"North Carolina\", short_name: \"NC\" },\n  { name: \"North Dakota\", short_name: \"ND\" },\n  { name: \"Ohio\", short_name: \"OH\" },\n  { name: \"Oklahoma\", short_name: \"OK\" },\n  { name: \"Oregon\", short_name: \"OR\" },\n  { name: \"Pennsylvania\", short_name: \"PA\" },\n  { name: \"Rhode Island\", short_name: \"RI\" },\n  { name: \"South Carolina\", short_name: \"SC\" },\n  { name: \"South Dakota\", short_name: \"SD\" },\n  { name: \"Tennessee\", short_name: \"TN\" },\n  { name: \"Texas\", short_name: \"TX\" },\n  { name: \"Utah\", short_name: \"UT\" },\n  { name: \"Vermont\", short_name: \"VT\" },\n  { name: \"Virginia\", short_name: \"VA\" },\n  { name: \"Washington\", short_name: \"WA\" },\n  { name: \"West Virginia\", short_name: \"WV\" },\n  { name: \"Wisconsin\", short_name: \"WI\" },\n  { name: \"Wyoming\", short_name: \"WY\" }\n];\n","export const DollarCell = ({ cell }) => {\n  // if(cell.row.original.)\n  const id = cell.column.id.split(\".\");\n  const notes =\n    (cell.row.original[id[0]] && cell.row.original[id[0]][id[1] + \"Notes\"]) ||\n    \"\";\n\n  return `${formatMoney(cell.value)} ${notes}`;\n};\n\nexport function formatMoney(value) {\n  if (value === undefined || value === null) return \"\";\n  return (\n    \"$\" +\n    value\n      .toFixed(2)\n      .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\")\n      .slice(0, -3)\n  );\n}\n\nexport const DateCell = ({ cell }) => {\n  if (cell.value) {\n    return formatDate(new Date(cell.value));\n  }\n  return null;\n};\n\nexport function formatDate(date) {\n  var monthNames = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n  ];\n\n  // var day = date.getDate();\n  // var year = String(date.getFullYear()).slice(2);\n  var monthIndex = date.getMonth();\n\n  return `${monthNames[monthIndex]} ${date.getFullYear()}`;\n}\n","import React from \"react\";\nimport { DollarCell } from \"./Cell\";\nimport { UtilityDict } from \"../types\";\nimport { UsedKeys } from \"../utils/getUsedKeys\";\n\nconst ColHeader = ({ name }: { name: string }) => {\n  const Icon = UtilityDict[name].Icon;\n  if (!Icon) return <div>{name}</div>;\n  return (\n    <>\n      <Icon /> {name}\n    </>\n  );\n};\n\nexport const DetailColumns = ({\n  name,\n  path = \"\",\n  usedKeys\n}: {\n  name: string;\n  path?: string;\n  usedKeys?: string[];\n}) => {\n  const cols = Object.keys(UtilityDict).map(k => ({\n    Header: <ColHeader name={k} />,\n    accessor: `${path}${name}.${k}`,\n    Cell: DollarCell,\n    width: 100\n  }));\n\n  if (usedKeys) {\n    return cols.filter(c =>\n      usedKeys.includes(c.accessor.split(\".\").pop() as string)\n    );\n  }\n\n  return cols;\n};\n\nconst allKeys = Object.keys(UtilityDict);\n\nexport const AllDetailColumns = ({\n  usedKeys = {\n    SingleFamily: allKeys,\n    MultiFamily: allKeys,\n    Retail: allKeys,\n    Office: allKeys,\n    Industrial: allKeys\n  } as UsedKeys,\n  path = \"\"\n}) => {\n  return [\n    {\n      Header: \"Single Family\",\n      columns: DetailColumns({\n        name: \"SingleFamily\",\n        usedKeys: usedKeys.SingleFamily || [],\n        path\n      })\n    },\n    {\n      Header: \"Multi Family\",\n      columns: DetailColumns({\n        name: \"MultiFamily\",\n        usedKeys: usedKeys.MultiFamily || [],\n        path\n      })\n    },\n    {\n      Header: \"Retail\",\n      columns: DetailColumns({\n        name: \"Retail\",\n        usedKeys: usedKeys.Retail || [],\n        path\n      })\n    },\n    {\n      Header: \"Office\",\n      columns: DetailColumns({\n        name: \"Office\",\n        usedKeys: usedKeys.Office || [],\n        path\n      })\n    },\n    {\n      Header: \"Industrial\",\n      columns: DetailColumns({\n        name: \"Industrial\",\n        usedKeys: usedKeys.Industrial || [],\n        path\n      })\n    }\n  ];\n};\n","import styled from \"styled-components\";\n\n// can't figure out how to get a class on the base \"tr\" or \"td\" to target properly\nconst TableStyles = styled.div`\n  .pagination {\n    padding: 0.5rem;\n    font-size: 14px;\n    position: fixed;\n    bottom: 0;\n    background: #1b1d20;\n    width: 100%;\n    z-index: 2;\n\n    .btn-group,\n    .selectpicker,\n    .form-control {\n      height: 2em;\n    }\n  }\n\n  svg {\n    opacity: 0.5;\n    font-size: 0.7em;\n  }\n\n  table {\n    a {\n      width: 100%;\n      height: 100%;\n      display: block;\n    }\n\n    border-spacing: 0;\n    border: 1px solid black;\n    margin-bottom: 2rem;\n\n    thead {\n      background-color: #1b1d20;\n      position: sticky;\n      top: 0;\n      display: block;\n      z-index: 5;\n      text-align: center;\n    }\n    tbody {\n      font-family: monospace;\n      text-align: right;\n    }\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\nexport default TableStyles;\n","import React, { useState } from \"react\";\n//@ts-ignore\nimport {\n  useTable,\n  useSortBy,\n  usePagination,\n  useFilters,\n  useBlockLayout\n} from \"react-table\";\nimport TableStyles from \"./TableStyles\";\nimport { FaAngleUp, FaAngleDown } from \"react-icons/fa\";\n\nconst SearchBar = ({ columns }) => {\n  const [columnFilter, setColumnFilter] = useState(2);\n  const currentCol = columns[0].columns[columnFilter];\n  return (\n    <div className=\"input-group my-3 pt-5\" style={{ width: \"300px\" }}>\n      <select\n        className=\"custom-select\"\n        onChange={e => {\n          columns[0].columns[Number(e.target.value)].setFilter(\n            currentCol.filterValue\n          );\n          currentCol.setFilter(undefined);\n          setColumnFilter(Number(e.target.value));\n        }}\n      >\n        <option value=\"2\">Jurisdiction</option>\n        <option value=\"1\">County</option>\n        <option value=\"0\">State</option>\n      </select>\n      <input\n        className=\"input-group-append form-control\"\n        onChange={e => {\n          currentCol.setFilter(e.target.value);\n        }}\n        placeholder=\"search...\"\n      />\n    </div>\n  );\n};\n\nexport function Table({ columns, data, hasPagination }) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page, // Instead of using 'rows', we'll use page,\n    // which has only the rows for the active page\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n    ...args\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageSize: 50 }\n    },\n    useBlockLayout,\n    useFilters,\n    useSortBy,\n    usePagination\n  );\n\n  return (\n    <TableStyles>\n      {hasPagination ? <SearchBar {...{ columns: args.columns }} /> : \"\"}\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                // Add the sorting props to control sorting. For this example\n                // we can add them into the header props\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render(\"Header\")}\n                  {/* Add a sort direction indicator */}\n                  <span>\n                    {column.isSorted ? (\n                      column.isSortedDesc ? (\n                        <FaAngleDown size={30} />\n                      ) : (\n                        <FaAngleUp size={30} />\n                      )\n                    ) : (\n                      \"\"\n                    )}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n\n      {/* \n        Pagination can be built however you'd like. \n        This is just a very basic UI implementation:\n      */}\n      {hasPagination ? (\n        <div className=\"pagination\">\n          <div className=\"btn-group\">\n            <button\n              className=\"btn btn-outline-secondary\"\n              onClick={() => gotoPage(0)}\n              disabled={!canPreviousPage}\n            >\n              {\"<<\"}\n            </button>{\" \"}\n            <button\n              className=\"btn btn-outline-secondary\"\n              onClick={() => previousPage()}\n              disabled={!canPreviousPage}\n            >\n              {\"<\"}\n            </button>{\" \"}\n            <button\n              className=\"btn btn-outline-secondary\"\n              onClick={() => nextPage()}\n              disabled={!canNextPage}\n            >\n              {\">\"}\n            </button>{\" \"}\n            <button\n              className=\"btn btn-outline-secondary\"\n              onClick={() => gotoPage(pageCount - 1)}\n              disabled={!canNextPage}\n            >\n              {\">>\"}\n            </button>{\" \"}\n          </div>\n          <span className=\"px-2\">\n            Page{\" \"}\n            <strong>\n              {pageIndex + 1} of {pageOptions.length}\n            </strong>{\" \"}\n          </span>\n          <span className=\"px-2\">| Go to page: </span>\n          <span className=\"px-2\">\n            <input\n              className=\"form-control\"\n              type=\"number\"\n              defaultValue={pageIndex + 1}\n              onChange={e => {\n                const page = e.target.value ? Number(e.target.value) - 1 : 0;\n                gotoPage(page);\n              }}\n              style={{ width: \"100px\" }}\n            />\n          </span>{\" \"}\n          <select\n            className=\"selectpicker\"\n            value={pageSize}\n            onChange={e => {\n              setPageSize(Number(e.target.value));\n            }}\n          >\n            {[20, 50, 100].map(pageSize => (\n              <option key={pageSize} value={pageSize}>\n                Show {pageSize}\n              </option>\n            ))}\n          </select>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </TableStyles>\n  );\n}\n","import React from \"react\";\n\nexport const Dropdown = ({\n  options,\n  onChange,\n  value,\n  className\n}: {\n  options: Array<{ name: string; value: string | number }>;\n  onChange: (val: any) => void;\n  value: string | number;\n  className?: string;\n}) => {\n  return (\n    <select\n      style={{ width: \"initial\" }}\n      className={\"custom-select\" + \" \" + className}\n      value={value}\n      onChange={e => {\n        onChange(e.target.value);\n      }}\n    >\n      {options.map(d => (\n        <option key={d.value} value={d.value}>\n          {d.name}\n        </option>\n      ))}\n    </select>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface ButtonOptionProps {\n  selected: boolean;\n}\n\nconst ButtonOption = styled.button`\n  z-index: ${(props: ButtonOptionProps) => (props.selected ? 1 : 0)};\n`;\n\nexport const ButtonOptions = ({\n  options,\n  onChange,\n  value\n}: {\n  options: Array<{\n    name: string;\n    value: string | number;\n    icon?: () => JSX.Element;\n  }>;\n  onChange: (val: any) => void;\n  value: string | number;\n}) => {\n  return (\n    <div className=\"btn-group\" role=\"group\">\n      {options.map(d => (\n        <ButtonOption\n          selected={d.value === value}\n          key={d.value}\n          onClick={() => onChange(d.value)}\n          className={\n            \"btn \" +\n            (value === d.value\n              ? \"btn-outline-primary\"\n              : \"btn-outline-secondary\")\n          }\n        >\n          {d.icon && <d.icon />} {d.name}\n        </ButtonOption>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Dropdown } from \"./Dropdown\";\nimport { ButtonOptions } from \"./ButtonOptions\";\n\nexport const ButtonsOrDropdown = (props: {\n  options: Array<{ name: string; value: string | number }>;\n  onChange: (val: any) => void;\n  value: string | number;\n  className?: string;\n}) => {\n  if (props.options.length > 8) {\n    return <Dropdown {...props} />;\n  } else {\n    return <ButtonOptions {...props} />;\n  }\n};\n","import React, { useState } from \"react\";\nimport { STATES } from \"../types\";\nimport stateAverages from \"../data/cleaned/stateAverages.json\";\nimport { AllDetailColumns } from \"./columns\";\nimport { Table } from \"./Table\";\nimport { ButtonsOrDropdown } from \"./ButtonsOrDropdown\";\nimport { ButtonOptions } from \"./ButtonOptions\";\nimport { BarChart, XAxis, YAxis, Bar, Tooltip } from \"recharts\";\nimport { formatMoney } from \"./Cell\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport { TypesOfPlaces, UtilityDict, PropertyDict } from \"../types\";\n\nconst Wrapper = styled.div`\n  td:nth-child(1),\n  tr:nth-child(2) th:nth-child(1) {\n    position: sticky;\n    left: 0;\n    background-color: #25282e;\n    z-index: 1;\n  }\n  tr:nth-child(2) th:nth-child(1) {\n    background-color: #1b1d20;\n  }\n  margin: 1rem;\n  width: 100%;\n  overflow-x: auto;\n`;\n\nlet data = [];\n\nObject.keys(stateAverages).forEach(State => {\n  if (stateAverages[State][0]) {\n    data.push({\n      DataEntries: stateAverages[State],\n      State: STATES.find(d => d.short_name === State).name,\n      StateShortName: State\n    });\n  }\n  return undefined;\n});\n\ndata = data.sort((d1, d2) => {\n  return (\n    d2.DataEntries[0].SingleFamily.Total - d1.DataEntries[0].SingleFamily.Total\n  );\n});\n\nconst yearOpts = data[0].DataEntries.map((d, i) => {\n  return { value: i, name: new Date(d.Updated).getFullYear() };\n});\n\nfunction getShortStateName(val) {\n  return STATES.find(d => d.name === val).short_name;\n}\n\nexport const AllStateAveragesPage = () => {\n  const [yearSelected, changeYear] = useState(0);\n  const [selectedPlace, changePlace] = useState(\"SingleFamily\");\n  const [selectedUtil, changeUtil] = useState(\"Total\");\n  const path = `DataEntries[${yearSelected}].`;\n  const leftOffStates = [];\n  const myData = data.filter(d => {\n    if (\n      d.DataEntries[yearSelected] &&\n      d.DataEntries[yearSelected].SampleSize > 5\n    ) {\n      return true;\n    } else {\n      leftOffStates.push({\n        State: d.State,\n        StateShortName: d.StateShortName,\n        SampleSize:\n          d.DataEntries[yearSelected] && d.DataEntries[yearSelected].SampleSize\n      });\n    }\n  });\n\n  const AllBars = Object.keys(PropertyDict).map(place => (\n    <Bar\n      dataKey={`${path}${place}.${selectedUtil}`}\n      fill={PropertyDict[place].color}\n    />\n  ));\n  return (\n    <>\n      <div style={{ margin: \"auto\", width: \"1200px\" }} className=\"text-center\">\n        <div className=\"text-left\">\n          <h1>State Averages</h1>\n          <ButtonsOrDropdown\n            className=\"mb-3\"\n            options={yearOpts}\n            onChange={val => {\n              changeYear(Number(val));\n            }}\n          />\n        </div>\n        <BarChart width={1200} height={250} data={myData}>\n          <XAxis dataKey=\"State\" tickFormatter={getShortStateName} />\n          <YAxis\n            tickFormatter={formatMoney}\n            // domain={[0, d => 40000]}\n          />\n          <Tooltip\n            formatter={(val, name) => [\n              formatMoney(val),\n              name.split(\".\")[1] + \" \" + name.split(\".\")[2]\n            ]}\n          />\n          {selectedPlace === \"All\" ? (\n            AllBars\n          ) : (\n            <Bar\n              dataKey={`${path}${selectedPlace}.${selectedUtil}`}\n              fill={PropertyDict[selectedPlace].color}\n            />\n          )}\n        </BarChart>\n        <ButtonOptions\n          className=\"mb-3\"\n          value={selectedPlace}\n          options={[\"All\", ...TypesOfPlaces].map(d => ({ name: d, value: d }))}\n          onChange={changePlace}\n        />\n        <br />\n        <ButtonOptions\n          className=\"mb-3\"\n          value={selectedUtil}\n          options={Object.keys(UtilityDict).map(d => ({\n            name: d,\n            value: d,\n            icon: UtilityDict[d].Icon\n          }))}\n          onChange={changeUtil}\n        />\n      </div>\n      <Wrapper>\n        <Table\n          columns={[\n            {\n              Header: \"State\",\n              accessor: \"State\",\n              Cell: ({ cell, row }) => {\n                return (\n                  <Link to={`state/${row.original.StateShortName}`}>\n                    {cell.value}\n                  </Link>\n                );\n              }\n            },\n            {\n              Header: \" \",\n              accessor: `${path}SampleSize`,\n              width: 50\n            },\n            ...AllDetailColumns({ path })\n          ]}\n          data={myData}\n        />\n      </Wrapper>\n      <div>\n        Sample size too small:{\" \"}\n        {leftOffStates.map(s => (\n          <Link className=\"p-2\" to={`/state/${s.StateShortName}`}>\n            {s.State} ({s.SampleSize || 0}){\" \"}\n          </Link>\n        ))}\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport { AllDetailColumns } from \"./columns\";\nimport { Table } from \"./Table\";\nimport { JurisdictionData } from \"../types\";\nimport { UsedKeys } from \"../utils/getUsedKeys\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  td:nth-child(1),\n  tr:nth-child(2) th:nth-child(1) {\n    position: sticky;\n    left: 0;\n    background-color: #25282e;\n    z-index: 1;\n  }\n  tr:nth-child(2) th:nth-child(1) {\n    background-color: #1b1d20;\n  }\n`;\n\nexport const JurisdictionTable = ({\n  data,\n  usedKeys\n}: {\n  data: JurisdictionData;\n  usedKeys: UsedKeys;\n}) => {\n  const columns = [\n    // @ts-ignore\n    ...(data.DataEntries[0].State\n      ? [\n          {\n            Header: \"State\",\n            accessor: \"State\"\n            // width: 70\n          }\n        ]\n      : []),\n    {\n      Header: \"Date\",\n      accessor: \"Updated\",\n      width: 90,\n      Cell: ({ cell }) => new Date(cell.value).getFullYear()\n    },\n    ...(data.DataEntries[0].SampleSize\n      ? [\n          {\n            Header: \"Sample Size\",\n            accessor: \"SampleSize\",\n            width: 70\n          }\n        ]\n      : []),\n    ...AllDetailColumns({ usedKeys })\n  ];\n\n  return (\n    <Wrapper>\n      <Table columns={columns} data={data.DataEntries} hasPagination={false} />\n    </Wrapper>\n  );\n};\n","import React, { useState } from \"react\";\nimport { LineChart, Tooltip, Line, XAxis, YAxis } from \"recharts\";\nimport { formatMoney } from \"./Cell\";\nimport {\n  JurisdictionData,\n  UtilityType,\n  TypesOfPlaces,\n  PropertyDict\n} from \"../types\";\nimport { UsedKeys } from \"../utils/getUsedKeys\";\nimport { ButtonsOrDropdown } from \"./ButtonsOrDropdown\";\n\nexport const HistoryLineChart = ({\n  DataEntries,\n  usedKeys\n}: {\n  DataEntries: JurisdictionData[\"DataEntries\"];\n  usedKeys: UsedKeys;\n}) => {\n  const [utility, setUtility] = useState(\"Total\" as UtilityType);\n  const opts: string[] = Object.keys(\n    Object.values(usedKeys)\n      .flat()\n      .reduce((acc, k) => {\n        acc[k] = k; // remove duplicates\n        return acc;\n      }, {})\n  );\n\n  const data = DataEntries.map(d => ({\n    SingleFamily: d.SingleFamily[utility],\n    MultiFamily: d.MultiFamily[utility],\n    Retail: d.Retail[utility],\n    Office: d.Office[utility],\n    Industrial: d.Industrial[utility],\n    Updated: d.Updated\n  }));\n  return (\n    <div className=\"d-inline-block\">\n      <LineChart\n        width={600}\n        height={400}\n        data={data}\n        margin={{\n          bottom: 10\n        }}\n      >\n        <XAxis\n          tickFormatter={val => {\n            return new Date(val).getFullYear();\n          }}\n          dataKey=\"Updated\"\n          type=\"number\"\n          domain={[\"auto\", \"auto\"]}\n        />\n        <YAxis tickFormatter={formatMoney} />\n        <Tooltip\n          labelFormatter={val => {\n            return new Date(val).getFullYear();\n          }}\n          formatter={formatMoney}\n        />\n        {TypesOfPlaces.map(propertyType => (\n          <Line\n            type=\"monotone\"\n            key={propertyType}\n            dataKey={propertyType}\n            stroke={PropertyDict[propertyType].color || \"\"}\n          />\n        ))}\n      </LineChart>\n      <div className=\"text-center\">\n        <ButtonsOrDropdown\n          onChange={setUtility}\n          value={utility as string}\n          options={opts.map(d => ({ name: d, value: d }))}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { PieChart, Pie, Cell } from \"recharts\";\n\nconst renderCustomizedLabel = ({ tooltipPayload, percent }) => {\n  let percentStr = Math.round(percent * 100) + \"% \";\n  if (percent * 100 < 1) {\n    percentStr = Math.round(percent * 1000) / 10 + \"% \";\n  }\n  return percentStr + tooltipPayload[0].name;\n};\n\nexport const DonutChart = ({\n  data\n}: {\n  data: Array<{ name: string; value: number; color: string }>;\n}) => {\n  const width = 480;\n  const height = 400;\n  return (\n    <PieChart className=\"piechart\" width={width} height={height}>\n      <Pie\n        data={data}\n        cx={width / 2}\n        cy={height / 2}\n        innerRadius={120}\n        outerRadius={140}\n        fill=\"#8884d8\"\n        paddingAngle={5}\n        dataKey=\"value\"\n        stroke={0}\n        // @ts-ignore\n        label={renderCustomizedLabel}\n      >\n        {// @ts-ignore\n        data.map((entry, index) => (\n          <Cell key={`cell-${index}`} fill={entry.color} />\n        ))}\n      </Pie>\n    </PieChart>\n  );\n};\n","import React, { useState } from \"react\";\nimport { DonutChart } from \"./DonutChart\";\nimport { UsedKeys } from \"../utils/getUsedKeys\";\nimport {\n  JurisdictionData,\n  PropertyType,\n  TypesOfPlaces,\n  UtilityDict\n} from \"../types\";\nimport { ButtonsOrDropdown } from \"./ButtonsOrDropdown\";\n\nexport const UtilPieChart = ({\n  usedKeys,\n  DataEntries\n}: {\n  usedKeys: UsedKeys;\n  DataEntries: JurisdictionData[\"DataEntries\"];\n}) => {\n  const yearsUsed = DataEntries.map((d, i) => ({\n    name: String(new Date(d.Updated).getFullYear()),\n    value: i\n  }));\n  const [propertyType, setPropertyType] = useState(\n    \"SingleFamily\" as PropertyType\n  );\n  const [yearIdx, setYear] = useState(0);\n  const data: {\n    name: string;\n    value: number;\n    color: string;\n    // @ts-ignore\n  }[] = usedKeys.SingleFamily.filter(\n    d => d !== \"Total\" && !!UtilityDict[d] // filter out things like TotalNotes\n  ).map(name => ({\n    name,\n    value: DataEntries[yearIdx][propertyType][name],\n    color: UtilityDict[name].color\n  }));\n  return (\n    <div className=\"d-inline-block mr-5 text-center\">\n      <DonutChart data={data} />\n      <ButtonsOrDropdown\n        onChange={setYear}\n        value={yearIdx}\n        options={yearsUsed}\n      />\n      <br />\n      <ButtonsOrDropdown\n        onChange={setPropertyType}\n        value={propertyType}\n        options={TypesOfPlaces.map(d => ({ name: d, value: d }))}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { JurisdictionTable } from \"./JurisdictionTable\";\nimport { HistoryLineChart } from \"./HistoryLineChart\";\nimport { UtilPieChart } from \"./UtilPieChart\";\nimport { getUsedKeys } from \"../utils/getUsedKeys\";\nimport { JurisdictionData } from \"../types\";\nconst Wrapper = styled.div`\n  margin: 1rem;\n  width: 100%;\n  overflow-x: auto;\n`;\n\nconst ChartsWrapper = styled.div`\n  max-width: 1200px;\n  margin: auto;\n  text-align: center;\n  > div {\n    margin: 1em 0;\n  }\n`;\n\nexport const DetailPage = ({\n  data,\n  headerText\n}: {\n  data: JurisdictionData;\n  headerText?: string | JSX.Element;\n}) => {\n  const usedKeys = getUsedKeys(data.DataEntries);\n  return (\n    <>\n      <ChartsWrapper>\n        {headerText}\n        <UtilPieChart DataEntries={data.DataEntries} usedKeys={usedKeys} />\n        <HistoryLineChart\n          // @ts-ignore\n          DataEntries={data.DataEntries}\n          usedKeys={usedKeys}\n        />\n      </ChartsWrapper>\n      <div className=\"m-4\" />\n\n      <Wrapper>\n        <JurisdictionTable\n          //@ts-ignore\n          usedKeys={usedKeys}\n          //@ts-ignore\n          data={data}\n        />\n      </Wrapper>\n    </>\n  );\n};\n","import {\n  JurisdictionData,\n  UtilityBreakDown,\n  PropertyType,\n  UtilityType\n} from \"../types\";\n\nexport type UsedKeys = Partial<{ [k in PropertyType]: UtilityType[] }>;\nexport function getUsedKeys(data: JurisdictionData[\"DataEntries\"]) {\n  const usedKeys: UsedKeys = {};\n  data.forEach(pointInTime => {\n    Object.keys(pointInTime).forEach((group: keyof typeof pointInTime) => {\n      const groupTime = pointInTime[group];\n      if (typeof groupTime === \"object\" && !Array.isArray(groupTime)) {\n        Object.keys(groupTime).forEach((cat: keyof UtilityBreakDown) => {\n          const val = pointInTime[group][cat];\n          if (val) {\n            usedKeys[group] = usedKeys[group] || [];\n\n            if (!usedKeys[group].includes(cat)) {\n              usedKeys[group].push(cat);\n            }\n          }\n        });\n      }\n    });\n  });\n  return usedKeys;\n}\n","import React from \"react\";\nimport { DetailPage } from \"./DetailPage\";\nimport nationalAverages from \"../data/cleaned/nationalAverages.json\";\nimport { Link } from \"react-router-dom\";\nimport { STATES } from \"../types\";\nimport stateAverages from \"../data/cleaned/stateAverages.json\";\n\nconst data = nationalAverages.filter(n => n.SampleSize > 50);\n\nexport const NationalAveragesPage = () => {\n  const DataEntries = data;\n  const myData = { DataEntries };\n  return (\n    <>\n      <DetailPage\n        data={myData}\n        headerText={\n          <div className=\"text-left\">\n            <h1>National Averages</h1>\n            <div style={{ opacity: 0.5, marginTop: \"-.5em\" }}>\n              Sample size: {DataEntries[1].SampleSize}\n            </div>\n          </div>\n        }\n      />\n      {STATES.map(s => {\n        const samples =\n          stateAverages[s.short_name][0] &&\n          stateAverages[s.short_name][0].SampleSize;\n        if (!samples) {\n          return <span className=\"p-2\">{s.name} </span>;\n        }\n        return (\n          <Link className=\"p-2\" to={`/state/${s.short_name}`}>\n            {s.name} ({samples})\n          </Link>\n        );\n      })}\n    </>\n  );\n};\n","import React from \"react\";\nimport { Table } from \"./Table\";\nimport { AllDetailColumns } from \"./columns\";\nimport { DateCell } from \"./Cell\";\nimport { Link } from \"react-router-dom\";\nimport data from \"../data/cleaned/nestedData.json\";\nimport styled from \"styled-components\";\n\n// to make Jurisdiction sticky but not detail 3rd row\nconst Wrapper = styled.div`\n  td:nth-child(3),\n  tr:nth-child(2) th:nth-child(3) {\n    position: sticky;\n    left: 0;\n    background-color: #25282e;\n    z-index: 1;\n  }\n  tr:nth-child(2) th:nth-child(3) {\n    background-color: #1b1d20;\n  }\n`;\n\nconst dataJS = Object.values(data);\nconst path = \"DataEntries[0].\";\nexport function OverallTable() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Basic Info\",\n        columns: [\n          {\n            Header: \"State\",\n            accessor: \"State\",\n            width: 50,\n            Cell: ({ cell }) => {\n              return <Link to={`state/${cell.value}`}>{cell.value}</Link>;\n            }\n          },\n          {\n            Header: \"County\",\n            accessor: \"County\"\n          },\n          {\n            Header: \"Jurisdiction\",\n            accessor: \"Jurisdiction\",\n            className: \"jurisdiction\",\n            Cell: ({ cell }) => {\n              return (\n                <Link\n                  to={`/state/${cell.row.original.State}/jurisdiction/${cell.value}`}\n                >\n                  {cell.value}\n                  <div className=\"light-text\">\n                    {cell.row.original.County}, {cell.row.original.State}\n                  </div>\n                </Link>\n              );\n            }\n          },\n          {\n            Header: \"Date\",\n            accessor: `${path}Updated`,\n            Cell: DateCell\n          }\n        ]\n      },\n      ...AllDetailColumns({ path })\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => dataJS, []);\n\n  return (\n    <Wrapper>\n      <Table columns={columns} data={data} hasPagination />\n    </Wrapper>\n  );\n}\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport nestedData from \"../data/cleaned/nestedData.json\";\nimport { DetailPage } from \"./DetailPage\";\nimport { JurisdictionData } from \"../types\";\n\nexport const JurisdictionPage = ({ myData }: { myData?: JurisdictionData }) => {\n  const { name, state } = useParams();\n  // @ts-ignore\n  const data: JurisdictionData = myData\n    ? myData\n    : nestedData[(state + name) as keyof typeof nestedData];\n\n  return (\n    <DetailPage\n      data={data}\n      headerText={\n        <div className=\"text-left\">\n          <h1>{name}</h1>\n          <div style={{ opacity: 0.5, marginTop: \"-.5em\" }}>\n            {data.County}, {data.State}\n          </div>\n        </div>\n      }\n    />\n  );\n};\n","import React from \"react\";\nimport { DetailPage } from \"./DetailPage\";\nimport { useParams, Link } from \"react-router-dom\";\nimport stateAverages from \"../data/cleaned/stateAverages.json\";\nimport { STATES } from \"../types\";\n\nexport const StateAveragesPage = () => {\n  const { state } = useParams();\n\n  const DataEntries = stateAverages[state];\n\n  if (!DataEntries[0] || !DataEntries[0].SampleSize)\n    return (\n      <div\n        style={{\n          fontSize: \"1.5em\",\n          textAlign: \"center\",\n          margin: \"2em\"\n        }}\n      >\n        Not enough data\n      </div>\n    );\n  const myData = { DataEntries, Jurisdiction: \"Averages\" };\n\n  const sampleSizes = DataEntries.map(s => s.SampleSize);\n  const min = Math.min(...sampleSizes);\n  const max = Math.max(...sampleSizes);\n\n  const jurisdictions = Object.keys(\n    DataEntries.reduce((acc, d) => {\n      d.SampleJurisdictions.forEach(j => {\n        acc[j] = true;\n      });\n      return acc;\n    }, {})\n  );\n\n  return (\n    <>\n      <DetailPage\n        data={myData}\n        headerText={\n          <div className=\"text-left\">\n            <h1>{STATES.find(s => s.short_name === state).name}</h1>\n            <div style={{ opacity: 0.5, marginTop: \"-.5em\" }}>\n              Sample size: {min === max ? min : `${min}-${max}`}\n            </div>\n          </div>\n        }\n      />\n      {jurisdictions.length} Jurisdictions:\n      {jurisdictions.sort().map(j => (\n        <Link className=\"p-2\" to={`/state/${state}/jurisdiction/${j}`}>\n          {j}{\" \"}\n        </Link>\n      ))}\n    </>\n  );\n};\n","import { useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nfunction ScrollToTop({ history }: { history: any }) {\n  useEffect(() => {\n    const unlisten = history.listen(() => {\n      window.scrollTo(0, 0);\n    });\n    return () => {\n      unlisten();\n    };\n  }, []);\n\n  return null;\n}\n\nexport default withRouter(ScrollToTop);\n","import React from \"react\";\nimport \"./App.css\";\nimport { About } from \"./components/About\";\nimport { AllStateAveragesPage } from \"./components/AllStateAveragesPage\";\nimport { NationalAveragesPage } from \"./components/NationalAveragesPage\";\nimport { OverallTable } from \"./components/OverallTable\";\nimport { JurisdictionPage } from \"./components/JurisdictionPage\";\nimport { StateAveragesPage } from \"./components/StateAveragesPage\";\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Link,\n  useParams,\n  useLocation\n} from \"react-router-dom\";\nimport ScrollToTop from \"./components/ScrollToTop\";\nimport styled from \"styled-components\";\n\nconst NavWrapper = styled.nav`\n  &&.home {\n    position: fixed;\n    width: 100%;\n    left: 0;\n    top: 0;\n    padding: 1rem;\n  }\n  display: flex;\n  .title {\n    flex-grow: 1;\n    text-align: center;\n  }\n  font-size: 18px;\n`;\n\nconst StateBreadcrumb = () => {\n  const { state } = useParams();\n  return (\n    <>\n      /\n      <Link className=\"p-2\" to={`/state/${state}`}>\n        {state}\n      </Link>\n    </>\n  );\n};\n\nconst JurisdictionBreadcrumb = () => {\n  const { state, name } = useParams();\n  return (\n    <>\n      /\n      <Link className=\"p-2\" to={`/state/${state}/jurisdiction/${name}`}>\n        {name}\n      </Link>\n    </>\n  );\n};\n\nconst Breadcrumbs = () => (\n  <div>\n    <Link className=\"pr-2 py-2\" to=\"/\">\n      Home\n    </Link>\n    <Route path=\"/state/:state\">\n      <StateBreadcrumb />\n    </Route>\n    <Route path=\"/state/:state/jurisdiction/:name\">\n      <JurisdictionBreadcrumb />\n    </Route>\n  </div>\n);\n\nconst Nav = () => {\n  const { pathname } = useLocation();\n  // ugly hack to make the nav bar stick on home where whole page scrolls\n  // without changing for other pages\n  return (\n    <NavWrapper className={pathname === \"/\" ? \"home\" : \"\"}>\n      <Breadcrumbs />\n      <div className=\"title\"></div>\n      <div>\n        <Link className=\"p-2\" to=\"/state-averages\">\n          State Averages\n        </Link>\n        <Link className=\"p-2\" to=\"/national-averages\">\n          National Averages\n        </Link>\n        <Link className=\"p-2\" to=\"/about\">\n          About\n        </Link>\n      </div>\n    </NavWrapper>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"m-3\">\n      <Router>\n        <ScrollToTop />\n        <Nav />\n        <Switch>\n          <Route path=\"/state/:state/jurisdiction/:name\">\n            <JurisdictionPage />\n          </Route>\n          <Route path=\"/state/:state\">\n            <StateAveragesPage />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/national-averages\">\n            <NationalAveragesPage />\n          </Route>\n          <Route path=\"/state-averages\">\n            <AllStateAveragesPage />\n          </Route>\n          <Route path=\"\">\n            <OverallTable />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}